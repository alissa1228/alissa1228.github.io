---
layout: post
title:  "웹앱 ? 하이브리드 앱 ? 네이티브 앱? 모바일 앱에 대하여"
date:   2024-01-24
categories: jekyll update
---

<br/>
<br/>


운이 좋게도 마음이 맞는 기획자를 만나 사이드 프로젝트를 하게 됐다! 처음에는 웹으로만 진행하려 했으나 모바일 앱을 함께 제공하면 좋겠다는 의견이 나와 한 번 도전해보기로 했다. 마침 모바일 앱에 대한 이해가 부족해 차근차근 알아가기 좋은 기회라고 생각했다.


---

<br/>

모바일 앱을 만드는 방법은 개발 방법과 내부 기능에 따라 다양한 유형으로 나뉜다. 

<br/>

### # 웹 앱(Web App)

'웹 앱'은 **데스크탑 또는 모바일 기기의 브라우저에서 사용할 수 있는 웹 기술 기반의 앱**을 말한다. 앱과 동일한 기능을 구현되어 네이티브 앱처럼 보이지만 HTML, CSS, JavaScript 등을 활용해 만들어져 인터넷 브라우저를 통해 제공된다. 사용자가 브라우저에서 직접 접근할 수 있기 때문에 사용자의 기기에 따로 설치할 필요가 없다.


- **장점** 👍
    - 성능을 세부적으로 제어할 수 있다. 소프트웨어 업데이트가 사용자에게 즉시 적용된다.
    -  단순하고 비용이 덜 들며 개발속도가 빠르다.(앱 개발 프로세스가 간단하다.)
<br/>

- **단점** 👎
    - 웹 브라우저에서 지원하는 기능만 사용할 수 있으며, 모바일 기기 내부 기능을 사용할 수 없다. 
    - 브라우저에 따라 달라지기 때문에 사용자 경험이 일관성이 없다. (브라우저의 창의 크기를 조정 시 애플리케이션의 모양, 느낌 및 기능에 영향을 미칠 수 있다.)
    - 앱에 접근하려면 인터넷 연결이 필요하다. 사용자가 모바일 브라우저를 열고 앱을 찾아야하기 때문에 여러 단계의 프로세스를 거쳐야한다. 
    - 속도가 느리고 응답성이 떨어진다.

<br/>

>Q. 모바일 웹과 웹 앱의 차이점?<br/>
A. **실행방식의 차이.** 모바일 웹은 화면 일부분이 변경될 때 화면 전체 내용을 서버에서 새로 받아오는 풀 브라우저(Full Browsing) 방식이고,웹 앱은 처음에 브라우저에 페이지 전체를 받아오고, 화면 일부분이 변경이나 요청이될 때 AJAX를 사용해 해당 부분만 데이터를 받아오는 단일페이지, SPA(Single Page Application) 방식이다. 

<br/>
+) 모바일 웹은 PC 웹페이지를 모바일에 맞게 적용할 거라면, 웹앱은 애초에 모바일 최적화를 위해 겉 모습과 구동방식이 네이티브 같은 웹 페이지다.

<br/>
<br/>

>[AJAX (Asynchronous JavaScript and XML)](https://developer.mozilla.org/ko/docs/Glossary/AJAX)
: XHR(XMLHttpRequest)을 사용해 동적인 웹페이지를 구성하는 프로그래밍 방식. 웹 페이지 전체를 다시 가져오지 않고, 웹 페이지 일부만 갱신할 수 있다. 


<br/>
<br/>

### # 네이티브 앱(Native App)

**모바일 기기에 최적화된 네이티브 언어로 개발되어 기기에 다운로드 및 설치할 수 있는 앱**을 말한다. 모바일 운영체제에 따라 언어가 다르기 때문에, 특정 플랫폼이나 기기 유형에 맞춰 개발자가 앱 기능을 작성하고 설계해야한다. (IOS - Swift / Objective-C, Android- Kotlin / Java)


- **장점** 👍
    - 사용자가 디바이스의 내부 하드웨어 및 운영 체제를 조작할 수 있다. (위치 추적, 마이크 및 카메라, 연락처 목록 접근, 터치 제스처, 기울이기 및 기타 사용자 조작, 지문 인식, 얼굴 인식 등등)
    - 푸시알람 등의 기능 가능
    - 기기에서 오프라인으로 작동할 수 있게 설계 가능하다. 
    - 앱 스토어에서 제공되기 때문에 검색 노출이 많다. 
    - 운영체제에 맞게 개발되었기 때문에 웹 앱보다 더 빠르고, 조작성과 응답성이 뛰어나다. 

<br/>

- **단점** 👎
    - 최적의 상태의 앱을 위해서는 사용자가 정기적으로 소프트웨어 업데이트를 다운로드하고 설치해야한다. 
    - 제작에 비용과 시간이 많이 든다.
    - 스토어를 통해 심사과정을 거친 뒤 업데이트를 진행해야한다. 

<br/>

- **언제 사용?** 💻
    - 3D 게임이나 애니메이션 제작 시
    - 장치의 기능을 사용하고 싶을 때 (하드웨어의 성능을 사용해야할 때)
    - 최적화나 성능 관련 이슈가 큰 앱을 개발하고 싶을 때

<br/>
<br/>

### # 하이브리드 앱(Hybrid APP)

네이티브 앱과 마찬가지로 사용자가 앱 스토어에서 하이브리드 앱을 다운로드하고 설치할 수 있다. 단, 네이티브 앱과 하이브리드 앱의 내부 구조는 아주 다르다. 하이브리드 앱은 내부로 보자면 웹 앱에 더 가깝다. (네이티브 앱과 웹 앱의 중간에 해당한다.)

**웹 브라우저가 내부에 포함된 네이티브 애플리케이션**이라고 보면 되며, 주로 웹 기술(HTML, CSS, JavaScript) 등을 사용해 구축한다. 구축한 앱은 Ionic, Cordova 또는 React Native 같은 하이브리드 앱 개발 프레임워크와 통합할 수 있다. (따라서 웹과 앱 API를 모두 사용할 수 있다.) 이는 웹 뷰를 통해 이루어지며 웹앱과 유사한 사용한 경험을 제공한다. 

- **장점** 👍
    - 개발자가 하나의 코드로 여러 플랫폼(IOS, Android)에 대한 애플리케이션을 만들 수 있다. (앱 기능을 단일 코드베이스로 작성할 수 있다.) 
    - 해당 코드를 네이티브 앱 셸 또는 컨테이너에 래핑하면 하드웨어, 캘린더, 알림 등 모바일 기기의 네이티브 기능을 활용할 수 있다.
    - 낮은 비용으로 네이티브 앱과 동일한 성능 및 사용자 경험을 제공한다.
    - 개발 시간이 짧고 앱 스토어에 업로드해 검색 노출을 확보할 수 있다.

<br/>

- **단점** 👎
    - 앱 패키징을 위해 네이티브 앱 개발 지식이 필요하다
    - 네이티브 앱에 비해 기능이 제한적이고 느리며 브라우저 성능에 따라 앱 성능이 영향을 받는다.

<br/>

-  **언제 사용?** 💻
    - 모바일, 웹 등 다양한 플랫폼을 통한 사용자 층이 넓을 때
    - 애니메이션이나 복잡한 기능이 들어가지 않는 간단한 프로젝트인 경우
    - 시간이 부족한 상황에서 여러 디바이스에서 실행되어야 하는 앱을 만들 때
    - 프로젝트 아이디어를 가장 간단하게 테스트 해보고 싶을 때.


<br/>
<br/>

### # 프로그레시브 웹 앱(Progressive Web App, PWA)

브라우저 기술 발전으로 탄생한 결과물. **모바일 기기에서 네이티브 앱과 같은 사용자 경험을 제공하는 웹 앱이다.**  최신 브라우저의 경우 웹 앱 자체에서 네이티브 앱과 같은 경험을 사용자에게 제공할 수 있다. 

기존 웹 앱을 중심으로 자바스크립트 프레임워크를 통합해 실현할 수 있으며, 하이브리드 앱과 마찬가지로 네이티브 앱과 웹 앱의 중간에 해당하는 유형이다. 전통적인 웹 앱과는 달리 네이티브 앱과 유사한 기능을 제공할 수 있다는 것이 특징이다. 

- **장점** 👍
    - 모바일 브라우저, 사용자 위치 추적 등을 통해 알람을 보낼 수 있다.
    - PWA는 오프라인에서 사용할 수 있고 푸시 알람 등을 받을 수 있어 웹앱보다 더 향상된 기능을 제공한다.
    - 사용자의 기기에 설치할 수 있으며 앱 아이콘이 홈 화면에 추가된다.
    - React, Angular 등으로 만들 수 있다. 

<br/>

- **단점** 👎
    - 브라우저가 최신이어야 한다는 단점이 있다. 오래된 브라우저들은 PWA를 지원하지 않는다.
    - 배터리 전력 소모가 크다.
    - 앱 스토어에서 사용할 수 없다.

<br/>

-  **언제 사용?** 💻
    - 기본 앱 기능이 있는 다중 플랫폼 앱이 필요할 때
    - 많은 사용자들이 다양한 채널을 통해 동시 접속할 때도 동일한 서비스를 제공하려고 할 때
    - 강력한 전자 상거래 서비스를 제공할 때

<br/>

>Q. 하이브리드앱과 프로그레시브 앱의 차이점은? 
>
>하이브리드 앱과 프로그레시브 앱(PWA)은 둘 다 웹 기술을 기반으로 하지만 몇 가지 차이점이 있다.
>- 하이브리드 앱은 웹 기술 기반이지만 네이티브 앱 컨테이너 안에서 실행된다. **사용자가 앱 스토어를 통해 다운로드하고 설치하는 방식의 형태**로 제공된다. 프로그레시브 앱은 주로 웹 브라우저를 통해 접근한다. 사용자는 **앱 스토어를 통하지 않고 웹 사이트를 방문해 직접 자신의 기기 홈 화면에 추가할 수 있다.**  
>- PWA은 하이브리드 앱보다 크기가 작고 스토리지와 메모리의 사용량이 적다. 하지만 기반 기술이 네이티브 기술이 아니기 때문에 브라우저 종속성으로 인해 사용자 모바일 기기 배터리 소모량이 증가할 수 있다.
>- PWA가 하이브리드 앱이나 웹 앱에 비해 새로운 기술이다. 
>- 하이브리드 앱은 앱 스토어를 통해 업데이트를 배포해야하지만, PWA는 개발자 측에서 업데이트를 진행하면 사용자는 별도의 업데이트 과정 없이 최신 버전을 사용할 수 있다. 
<br/>

<br/>
<br/>

### # 크로스 플랫폼 앱(Cross Platoform Application)


크로스 플랫폼 앱은 한 가지 개발 언어와 프레임워크로 안드로이드, iOS 네이티브 앱을 만드는 개발방식이다. 네이티브 코드가 아닌 다른 개발 언어로 코드를 작성한 후 각각 OS가 이해할 수 있는 코드로 컴파일 한 후, 각각의 OS 엔진으로 실행하는 방식이다. 대표적인 프레임워크는 Flutter(구글), React Native(페이스북), Xamarin(마이크로소프트) 등이 있다. 모바일 앱 개발에 초점을 맞춰 하나의 코드로 여러 모바일 운영체제에서 작동할 수 있는 앱 생성을 목표로 한다.

- **장점** 👍
    - React Native나 Flutter와 같은 프레임워크는 네이티브 컴포넌트와의 직접적인 상호작용을 가능하게 하여, 네이티브 앱과 유사한 성능과 사용자 경험을 제공한다.
    - 크로스 플랫폼 앱은 네이티브에 가까운 경험을 제공하며 하이브리드 앱보다 더 우수한 성능을 보여준다.
    - 한 가지 코드로 여러 플랫폼 앱을 개발할 수 있다는 점에서 개발 시간과 비용을 줄일 수 있다.

<br/>

-  **단점** 👎
    - 네이티브 앱만큼의 퍼포먼스를 100% 구현할 수 없다. 
    - 라이브러리가 다양하지 않아 기능 구현이 어렵다.
    - 안드로이드와 iOS OS에 새로운 기능이 추가되면 네이티브 앱은 즉시 사용 및 업데이트가 가능하지만 크로스 플랫폼 앱은 사용에 있어 업데이트 지연이 발생할 수 있다.



<br/>
<br/>


**📌 참고**
- [https://aws.amazon.com/ko/compare/the-difference-between-web-apps-native-apps-and-hybrid-apps/](https://aws.amazon.com/ko/compare/the-difference-between-web-apps-native-apps-and-hybrid-apps/)
- [https://blog.hectodata.co.kr/app_kinds/](https://blog.hectodata.co.kr/app_kinds/)
- [https://brunch.co.kr/@rlatjrwn9086/61](https://brunch.co.kr/@rlatjrwn9086/61)
- [https://www.inflearn.com/pages/infmation-49-20220607](https://www.inflearn.com/pages/infmation-49-20220607)
- [@openhub 님의 velog](https://velog.io/@openhub/%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EC%95%B1Native-App-vs-%ED%95%98%EC%9D%B4%EB%B8%8C%EB%A6%AC%EB%93%9C-%EC%95%B1Hybrid-App-vs-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%A0%88%EC%8B%9C%EB%B8%8C-%EC%9B%B9-%EC%95%B1PWA-%EC%A0%95%EC%9D%98%EC%99%80-%EC%9E%A5%EB%8B%A8%EC%A0%90)
- [@1nthek 님의 velog](https://velog.io/@1nthek/%EC%95%B1%EC%9D%98-%EC%A2%85%EB%A5%98-%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EC%95%B1-vs-%ED%81%AC%EB%A1%9C%EC%8A%A4-%ED%94%8C%EB%9E%AB%ED%8F%BC-%EC%95%B1-vs-%ED%95%98%EC%9D%B4%EB%B8%8C%EB%A6%AC%EB%93%9C-%EC%95%B1)
- [https://yozm.wishket.com/magazine/detail/1969/](https://yozm.wishket.com/magazine/detail/1969/)

<br/>
<br/>